#------------------------------------------------------------------------------------------------------
# Name: Parth Dadhania
# SID: 1722612
# CCID: pdadhani
# AnonID: 1000330704
# CMPUT 274, Fall 2022
# Assessment: Weekly Exercise 02 - Unfair Dice
# Running instructions: There are no special running instructions for running this program but just to
#                       let user know, I have created an extra function(dice_face_assign) which doesn't
#                       need any extra calling. This function is directly called from the function     
#                       biased_rolls. Hence, in order to run the program, calling biased_rolls and 
#                       draw_histogram will be sufficient.
#-------------------------------------------------------------------------------------------------------

def biased_rolls(prob_list, s, n): 
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results. 

    Arguments:
        prob_list: a list of the probabilities of rolling the 
                   number on each side of the m-sided die. The list  
                   will always have the length m (m >= 2), where m is 
                   the number of sides numbered 1 to m. Therefore,  
                   for example, the probability stored at index 0 in 
                   the list is the probability of rolling a 1 on
                   the m-sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return:
        rolls: a list (of length n) containing each of the n rolls of the 
               biased die, in the order they were generated.
    """
    
    # problem solving:

    import random

    # initializing the seed using the input argument
    random.seed(s)

    rolls = []
    for i in range(n):
        rand_no = random.random()

        # calling the extra function dice_face_assign 
        # to assign the random number a dice face 
        face = dice_face_assign(prob_list,rand_no)
        
        # appending the resulting face in the list 'rolls'
        rolls.append(face)

    # return the resulting rolls
    return rolls

def dice_face_assign(prob_list, rand_no):
    """ Assigns a dice face number to a pseudo-randomly generated number
        in accordance to a probablity mapping from input list prob_list.

        Arguments:
            prob_list: a list of the probabilities of rolling the
                       number on each side of the m-sided die. The list
                       will always have the length m (m >= 2), where m is
                       the number of sides numbered 1 to m. Therefore,
                       for example, the probability stored at index 0 in
                       the list is the probability of rolling a 1 on
                       the m-sided die.
            rand_no: this is a pseudo randomly generated number between [0.0,1.0).
                     This number is generated in the function biased_rolls and is 
                     passed on to this function as an input.
        Returns:
            (m+1): this is the assigned face number of the die which is calculated 
                   using the random number rand_no and probablity mapping.
    """

    # problem solving:

    # initializing the cumulative sum of probablity
    prob_cumsum = 0

    for m in range(len(prob_list)):

        # calculating the cumulative sum using a for loop
        prob_cumsum += prob_list[m]

        # testing whether the random number input is less 
        # than the current cumulative sum of probability
        if rand_no < prob_cumsum:

            #breaking the for loop if the condition above is true
            break
    
    # returning the element number of the list prob_list
    # for which the above if condition was true
    return(m+1)


def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.

    Arguments: 
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram, in characters
                     (this is the length of the longest bar in the 
                     histogram, to maximize space in the chart)

    Returns:
        None (but prints the histogram to standard output)
    """
    # problem solving:

    # creating a list of m elements, all of them equal to integer 0
    count_list = [0] * m
    
    # Filling all the elements of count_list with the frequency of 
    # appearence of each faces of die in the list rolls
    for i in rolls:
        count_list[i-1] += 1

    # getting the frequency of the die face which has the highest frequency
    # from the list count_list
    high_freq = max(count_list)

    # printing what sided dice is used to generate the histogram using input
    print(f'Frequency Histogram: {m}-sided Die')

    # Scaling and printing the histogram according to the input
    face = 0
    for freq in count_list:
        face += 1

        # calculating the scaling factor and the number of hashtags to 
        # print according to the scaling factor
        char_hash = round(freq*width/high_freq)
        
        # printing hyphens in the remaining spaces of the total 'width' spaces 
        # after calculating the number of hyphens to be printed
        char_hyphen = width - char_hash
        print(face,'.','#'*char_hash,'-'*char_hyphen,sep='',end='\n')


if __name__ == "__main__":
    # Any code indented under this line will only be run
    # when the program is called directly from the terminal
    # using "python3 unfairDice.py". This can be useful for
    # testing your implementations.

    '''
    rolls = biased_rolls([1/12, 1/4, 1/3, 1/12, 1/12, 1/6], (2**32)-1, 20)
    print(rolls)
    draw_histogram(6, rolls, 50)

    rolls = biased_rolls([1/4, 1/6, 1/12, 1/12, 1/4, 1/6], 42, 200)
    draw_histogram(6, rolls, 10)

    rolls = biased_rolls([1/3, 1/3, 1/3], (2**32)-1, 1000)
    draw_histogram(3, rolls, 10)
    '''

    pass
